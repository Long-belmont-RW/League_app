# Generated by Django 5.2.2 on 2025-08-13 12:27

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('league', '0013_match_actual_kickoff_time'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FantasyLeague',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('scoring_rules', models.JSONField(default=dict, help_text='JSON scoring config: e.g., goals, assists, cards, clean_sheets')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('max_team_size', models.PositiveIntegerField(default=15)),
                ('budget_cap', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('transfer_limit', models.PositiveIntegerField(default=1, help_text='Transfers allowed per match week')),
                ('max_per_real_team', models.PositiveIntegerField(default=3)),
                ('allow_captain_multiplier', models.BooleanField(default=True)),
                ('captain_multiplier', models.PositiveIntegerField(default=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FantasyMatchWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField(help_text='Week number starting at 1')),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('deadline_at', models.DateTimeField()),
                ('fantasy_league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_weeks', to='fantasy.fantasyleague')),
                ('matches', models.ManyToManyField(blank=True, related_name='fantasy_match_weeks', to='league.match')),
            ],
            options={
                'ordering': ['fantasy_league_id', 'index'],
                'unique_together': {('fantasy_league', 'index')},
            },
        ),
        migrations.CreateModel(
            name='FantasyPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_at_purchase', models.DecimalField(decimal_places=2, max_digits=12)),
                ('is_captain', models.BooleanField(default=False)),
                ('is_vice_captain', models.BooleanField(default=False)),
                ('active_from', models.DateField()),
                ('active_to', models.DateField(blank=True, help_text='Null means currently in the squad', null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fantasy_players', to='league.player')),
            ],
            options={
                'ordering': ['fantasy_team_id', 'player_id'],
            },
        ),
        migrations.CreateModel(
            name='FantasyTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fantasy_league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='fantasy.fantasyleague')),
                ('players', models.ManyToManyField(related_name='fantasy_teams', through='fantasy.FantasyPlayer', to='league.player')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fantasy_teams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='fantasyplayer',
            name='fantasy_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fantasy_players', to='fantasy.fantasyteam'),
        ),
        migrations.CreateModel(
            name='FantasyLeaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_week', models.IntegerField(default=0)),
                ('cumulative_points', models.IntegerField(default=0)),
                ('rank', models.PositiveIntegerField(default=0)),
                ('is_overall', models.BooleanField(default=False, help_text='True for overall/cumulative row')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fantasy_match_week', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='fantasy.fantasymatchweek')),
                ('fantasy_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='fantasy.fantasyteam')),
            ],
            options={
                'ordering': ['-is_overall', 'rank', '-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='FantasyPlayerStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('breakdown', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fantasy_match_week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='fantasy.fantasymatchweek')),
                ('fantasy_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='week_stats', to='fantasy.fantasyplayer')),
            ],
            options={
                'ordering': ['-fantasy_match_week_id', '-updated_at'],
                'constraints': [models.UniqueConstraint(fields=('fantasy_player', 'fantasy_match_week'), name='unique_stats_per_player_per_week')],
            },
        ),
        migrations.AddConstraint(
            model_name='fantasyplayer',
            constraint=models.UniqueConstraint(condition=models.Q(('active_to__isnull', True)), fields=('fantasy_team', 'player'), name='unique_active_player_on_team'),
        ),
        migrations.AddConstraint(
            model_name='fantasyplayer',
            constraint=models.UniqueConstraint(condition=models.Q(('active_to__isnull', True), ('is_captain', True)), fields=('fantasy_team',), name='unique_active_captain_per_team'),
        ),
        migrations.AddConstraint(
            model_name='fantasyplayer',
            constraint=models.UniqueConstraint(condition=models.Q(('active_to__isnull', True), ('is_vice_captain', True)), fields=('fantasy_team',), name='unique_active_vice_captain_per_team'),
        ),
        migrations.AddConstraint(
            model_name='fantasyleaderboard',
            constraint=models.UniqueConstraint(fields=('fantasy_team', 'fantasy_match_week'), name='unique_weekly_leaderboard_entry'),
        ),
        migrations.AddConstraint(
            model_name='fantasyleaderboard',
            constraint=models.UniqueConstraint(condition=models.Q(('is_overall', True)), fields=('fantasy_team', 'is_overall'), name='unique_overall_leaderboard_entry'),
        ),
    ]
