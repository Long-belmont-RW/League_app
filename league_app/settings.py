"""
Django settings for league_app project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_stmcv%3h^o3(37==ly6@a2&z9x=oc5^&kk+che)ja46hc91c4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']  # Change this in production to your domain or IP

# Application definition

INSTALLED_APPS = [
    #My Apps
    'users.apps.UsersConfig',
    'league.apps.LeagueConfig',
    'content.apps.ContentConfig',
    'fantasy.apps.FantasyConfig',


    #Third Party
    'tailwind',
    'theme',
    'widget_tweaks',
    'debug_toolbar',
    'allauth', 
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',


    #Default
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    #Third Party
    'allauth.account.middleware.AccountMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'league_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'league_app.wsgi.application'
ASGI_APPLICATION = 'league_app.asgi.application'

# Channels layer (in-memory for dev)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    }
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#SITE ID for allauth
SITE_ID = 1

#configuration for static files
STATIC_URL = '/static/'
STATICFILES_DIRS = (
BASE_DIR / 'static',
)

STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTHENTICATION_BACKENDS = [
   'users.authentication.EmailRoleAuthBackend',  #custom backend
    'allauth.account.auth_backends.AuthenticationBackend', #django-allauth authentication
    'django.contrib.auth.backends.ModelBackend',
]

#Custom user model and all auth configuration
AUTH_USER_MODEL = "users.User"


# ==============================================================================
# ALLAUTH SETTINGS
# ==============================================================================
SITE_ID = 1

# This setting is used by allauth to redirect after a successful login.
LOGIN_REDIRECT_URL = '/' 
LOGOUT_REDIRECT_URL = '/login/' # Or your desired landing page

# Use the custom adapters
ACCOUNT_ADAPTER = 'league.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'league.adapters.CustomSocialAccountAdapter'

# --- Core Account Settings ---
ACCOUNT_LOGIN_METHODS = {"email"}              # replaces deprecated ACCOUNT_AUTHENTICATION_METHOD
ACCOUNT_SIGNUP_FIELDS = []  # Social signup should not require password fields; email is provided by the provider
ACCOUNT_EMAIL_VERIFICATION = "optional"        # or "mandatory" if you want strict verification
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[League App] "
ACCOUNT_UNIQUE_EMAIL = True

# --- Social Account Settings ---
SOCIALACCOUNT_AUTO_SIGNUP = True  # Automatically sign up users on successful social login
SOCIALACCOUNT_LOGIN_ON_GET = True # Avoids an intermediary confirmation page
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none' # We trust the social provider's email
SOCIALACCOUNT_EMAIL_REQUIRED = True # Ensures we get an email from the provider

# Do not use allauth's built-in signup form.
ACCOUNT_SIGNUP_FORM_CLASS = None


# --- Provider-Specific Settings ---
# You can add settings for other providers like GitHub here.
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'github': {
        'SCOPE': [
            'user:email',
        ],
    }
}
# ==============================================================================



# tailwind Configuration
TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = ['127.0.0.1']
NPM_BIN_PATH = r'C:\Program Files\nodejs\npm.cmd'

#Email configuration for console display
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = ''
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keeps Django's default logging
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),  # Change path if needed
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        
        'league': {  # Replace with your app name
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },

        'users': { # This is the logger for your 'users' app
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },

        'content':{
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        }
    },
}

INTERNAL_IPS = [
        '127.0.0.1',
    ]